source('~/Desktop/PhD/Paper2/Paper2Code/Peregrine/SupportFunctions/globalVariables.R')
CoefMatrices <- array(NA, dim = c(numberVariables, numberVariables, max(nClusters)))
CoefMatrices[ , , 1] = matrix(rep(0, numberVariables * numberVariables),
ncol = numberVariables, nrow = numberVariables, byrow = TRUE)
CoefMatrices[ , , 2] = matrix(c(1, 0, 0, 1,
1, 0, 1, 0,
1, 0, -1, 0,
1, -1, 0, 0),
ncol = numberVariables, nrow = numberVariables, byrow = TRUE)
CoefMatrices[ , , 3] = matrix(c(1, 0, 1, 0,
1, 0, 0, 1,
1, -1, 0, 0,
1, 0, -1, 0),
ncol = numberVariables, nrow = numberVariables, byrow = TRUE)
CoefMatrices[ , , 4] = matrix(c(0, 0, 1, 1,
1, -1, 0, 0,
1, 0, 0, 1,
0, -1, -1, 0),
ncol = numberVariables, nrow = numberVariables, byrow = TRUE)
btwClDistMat <- array(NA, dim = c(numberVariables, max(nLags)*numberVariables, max(nClusters), length(nLags)))
btwClDistMat[ , , 1, 1]
btwClDistMat[ , , 1, 1] = cbind(CoefMatrices[ , , 1], CoefMatrices[ , , 1])
btwClDistMat[ , , 1, 1]
btwClDistMat
btwClDistMat[ , , 2, 1] = cbind(CoefMatrices[ , , 2], CoefMatrices[ , , 1])
btwClDistMat[ , , 3, 1] = cbind(CoefMatrices[ , , 3], CoefMatrices[ , , 1])
btwClDistMat[ , , 4, 1] = cbind(CoefMatrices[ , , 4], CoefMatrices[ , , 1])
btwClDistMat
### Lag 2 btwClDistMat[ , , , 2]
btwClDistMat[ , , 1, 2] = cbind(CoefMatrices[ , , 1], CoefMatrices[ , , 1])
# The first btwClDistMat is filled with zeros, is for first matrix which is not altered
btwClDistMat[ , , 2, 2] = cbind(CoefMatrices[ , 1:2, 2], CoefMatrices[ , 1:2, 1], CoefMatrices[ , 3:4, 2], CoefMatrices[ , 3:4, 1])
btwClDistMat[ , , 3, 2] = cbind(CoefMatrices[ , 1:2, 3], CoefMatrices[ , 1:2, 1], CoefMatrices[ , 3:4, 3], CoefMatrices[ , 3:4, 1])
btwClDistMat[ , , 4, 2] = cbind(CoefMatrices[ , 1:2, 4], CoefMatrices[ , 1:2, 1], CoefMatrices[ , 3:4, 4], CoefMatrices[ , 3:4, 1])
btwClDistMat
EuclideDistance[1]
btwClDistMat[ , , , 1]
#### Calculate Euclidean distance resulting from btwClDistMat and EuclideDistance ####
source("ExampleData/SupportFunctions/globalVariables.R")
source("/home/anja/Desktop/PhD/Paper2/Paper2Code/ExampleData/SupportFunctions/betweenClDiffVariables.R")
ComparisonMat = btwClDistMat * EuclideDistance[1]
## Lag 1
Lag1EuclideanDist <- dist(rbind(as.vector(ComparisonMat[ , 1:4, 1, 1]),  as.vector(ComparisonMat[ , 1:4, 2, 1]),
as.vector(ComparisonMat[ , 1:4, 3, 1]), as.vector(ComparisonMat[ , 1:4, 4, 1])) , method = "euclidean")
## Lag 2
Lag2EuclideanDist <- dist(rbind(as.vector(ComparisonMat[ , , 1, 2]),  as.vector(ComparisonMat[ , , 2, 2]),
as.vector(ComparisonMat[ , , 3, 2]), as.vector(ComparisonMat[ , , 4, 2])) , method = "euclidean")
source("ExampleData/SupportFunctions/globalVariables.R")
source("/home/anja/Desktop/PhD/Paper2/Paper2Code/ExampleData/SupportFunctions/betweenClDiffVariables.R")
source("/home/anja/Desktop/PhD/Paper2/Paper2Code/Peregrine/SupportFunctions/globalVariables.R")
source("/home/anja/Desktop/PhD/Paper2/Paper2Code/Peregrine/SupportFunctions/betweenClDiffVariables.R")
ComparisonMat = btwClDistMat * EuclideDistance[1]
## Lag 1
Lag1EuclideanDist <- dist(rbind(as.vector(ComparisonMat[ , 1:4, 1, 1]),  as.vector(ComparisonMat[ , 1:4, 2, 1]),
as.vector(ComparisonMat[ , 1:4, 3, 1]), as.vector(ComparisonMat[ , 1:4, 4, 1])) , method = "euclidean")
## Lag 2
Lag2EuclideanDist <- dist(rbind(as.vector(ComparisonMat[ , , 1, 2]),  as.vector(ComparisonMat[ , , 2, 2]),
as.vector(ComparisonMat[ , , 3, 2]), as.vector(ComparisonMat[ , , 4, 2])) , method = "euclidean")
Lag1EuclideanDist
Lag2EuclideanDist
ComparisonMat = btwClDistMat * EuclideDistance[2]
## Lag 1
Lag1EuclideanDist <- dist(rbind(as.vector(ComparisonMat[ , 1:4, 1, 1]),  as.vector(ComparisonMat[ , 1:4, 2, 1]),
as.vector(ComparisonMat[ , 1:4, 3, 1]), as.vector(ComparisonMat[ , 1:4, 4, 1])) , method = "euclidean")
## Lag 2
Lag2EuclideanDist <- dist(rbind(as.vector(ComparisonMat[ , , 1, 2]),  as.vector(ComparisonMat[ , , 2, 2]),
as.vector(ComparisonMat[ , , 3, 2]), as.vector(ComparisonMat[ , , 4, 2])) , method = "euclidean")
Lag2EuclideanDist
EuclideDistance[2]
\sqrt{2}/2
sqrt{2}/2
sqrt(.5)
0.3394113 ^ 2
ComparisonMat[ , 1:4, 1, 1]
ComparisonMat[ , , 1, 2]
Lag1EuclideanDist
.2 * 8
.2^2
.04*8
sqrt(.32)
ComparisonMat = btwClDistMat * EuclideDistance[1]
## Lag 1
Lag1EuclideanDist <- dist(rbind(as.vector(ComparisonMat[ , 1:4, 1, 1]),  as.vector(ComparisonMat[ , 1:4, 2, 1]),
as.vector(ComparisonMat[ , 1:4, 3, 1]), as.vector(ComparisonMat[ , 1:4, 4, 1])) , method = "euclidean")
## Lag 2
Lag2EuclideanDist <- dist(rbind(as.vector(ComparisonMat[ , , 1, 2]),  as.vector(ComparisonMat[ , , 2, 2]),
as.vector(ComparisonMat[ , , 3, 2]), as.vector(ComparisonMat[ , , 4, 2])) , method = "euclidean")
Lag1EuclideanDist
Lag2EuclideanDist
.12^2
0.0144*8
sqrt(0.1152)
.0144
digitis = 5
sqrt(0.1152)
Lag2EuclideanDist
72/625
0.0144*8
digits = 10
0.0144*8
sqrt(72/625)
72/625
EuclideDistance[2]
sqrt(.2)
sqrt(.2)*8
.2^2*8
sqrt(.32)
ComparisonMat = btwClDistMat * EuclideDistance[2]
## Lag 1
Lag1EuclideanDist <- dist(rbind(as.vector(ComparisonMat[ , 1:4, 1, 1]),  as.vector(ComparisonMat[ , 1:4, 2, 1]),
as.vector(ComparisonMat[ , 1:4, 3, 1]), as.vector(ComparisonMat[ , 1:4, 4, 1])) , method = "euclidean")
## Lag 2
Lag2EuclideanDist <- dist(rbind(as.vector(ComparisonMat[ , , 1, 2]),  as.vector(ComparisonMat[ , , 2, 2]),
as.vector(ComparisonMat[ , , 3, 2]), as.vector(ComparisonMat[ , , 4, 2])) , method = "euclidean")
Lag2EuclideanDist
btwClDistMat
EuclideDistance[2]
8/16
8/12
0.6666667 * EuclideDistance[2]
4*8
EuclideDistance[2] *.5
EuclideDistance[1] *.5
8/32
EuclideDistance[2] *.25
EuclideDistance[1] *.25
source("/home/anja/Desktop/PhD/Paper2/Paper2Code/Peregrine/SupportFunctions/globalVariables.R")
load("/home/anja/Desktop/PhD/Paper2/Paper2Code/Peregrine/Data/Paper2Results.RData")
library(reshape)
library(heplots)
library(Hmisc)
options(scipen = 1)
options(digits = 3)
names(PrelimResults$ARI) = c("Lags", "Clusters", "Cluster proportion", "Time points",
"Distance", "Replications",  "StatusOfB")
MeltedARI <- melt(PrelimResults$ARI[ , , , , , , ])
names(MeltedARI) <- c("Lags", "Clusters", "Proportion", "Observations",
"Distance", "Replications",  "ARIvalue")
MeltedARI$Lags <- as.factor(MeltedARI$Lags)
levels(MeltedARI$Lags) <- c("1", "2")
MeltedARI$Clusters <- as.factor(MeltedARI$Clusters)
levels(MeltedARI$Clusters) <- c("2", "4")
MeltedARI$Proportion <- as.factor(MeltedARI$Proportion)
levels(MeltedARI$Proportion) <- c("Equal", "Majority")
MeltedARI$Observations <- as.factor(MeltedARI$Observations)
levels(MeltedARI$Observations) <- c("50", "150")
MeltedARI$Distance <- as.factor(MeltedARI$Distance)
levels(MeltedARI$Distance) <- c("Small", "Large")
str(MeltedARI)
ANOVA <- aov(ARIvalue ~ Lags + Clusters + Proportion + Observations + Distance
Lags * Clusters + Lags * Proportion + Lags * Observations + Lags * Distance +
Clusters * Proportion + Clusters * Observations + Clusters * Distance +
Proportion * Observations + Proportion * Distance +
Observations * Distance
, data = MeltedARI)
aov(ARIvalue ~ Lags + Clusters + Proportion + Observations + Distance
Lags * Clusters + Lags * Proportion + Lags * Observations + Lags * Distance +
Clusters * Proportion + Clusters * Observations + Clusters * Distance +
Proportion * Observations + Proportion * Distance +
Observations * Distance
, data = MeltedARI)
aov(ARIvalue ~ Lags + Clusters + Proportion + Observations + Distance +
Lags * Clusters + Lags * Proportion + Lags * Observations + Lags * Distance +
Clusters * Proportion + Clusters * Observations + Clusters * Distance +
Proportion * Observations + Proportion * Distance +
Observations * Distance
, data = MeltedARI)
summary(ANOVA)
ANOVA <- aov(ARIvalue ~ Lags + Clusters + Proportion + Observations + Distance +
Lags * Clusters + Lags * Proportion + Lags * Observations + Lags * Distance +
Clusters * Proportion + Clusters * Observations + Clusters * Distance +
Proportion * Observations + Proportion * Distance +
Observations * Distance
, data = MeltedARI)
summary(ANOVA)
anova(ANOVA)
Anova(ANOVA)
which(etasq(ANOVA)>.1)
etasq(ANOVA)
PARI <- melt.array(PrelimResults$ARI)
MeltARI$ID <- ID
str(PARI)
dimnames(ARI)[[1]] <- c("VAR1", "VAR2")
dimnames(ARI)[[2]] <- c("2", "4")
dimnames(ARI)[[3]] <- c("Equal", "Majority")
dimnames(ARI)[[4]] <- c("50", "150")
dimnames(ARI)[[5]] <- c("Small", "Large")
dimnames(PrelimResults$ARI)[[1]] <- c("VAR1", "VAR2")
dimnames(PrelimResults$ARI)[[2]] <- c("2", "4")
dimnames(PrelimResults$ARI)[[3]] <- c("Equal", "Majority")
dimnames(PrelimResults$ARI)[[4]] <- c("50", "150")
dimnames(PrelimResults$ARI)[[5]] <- c("Small", "Large")
MeltARI <- melt.array(PrelimResults$ARI)
names(MeltARI) <- c("Lags", "Clusters", "Proportion", "Observations",
"Distance", "Replications",  "ARIvalue")
str(MeltARI)
names(MeltARI) <- c("Lags", "Clusters", "Proportion", "Observations",
"Distance", "Replications",  "StatusB", "ARIvalue")
str(MeltARI)
ANOVA2 <-  aov(ARIvalue ~ Lags + Clusters + Proportion + Observations + Distance +
Lags * Clusters + Lags * Proportion + Lags * Observations + Lags * Distance +
Clusters * Proportion + Clusters * Observations + Clusters * Distance +
Proportion * Observations + Proportion * Distance +
Observations * Distance
, data = MeltARI)
summary(ANOVA2)
summary(ANOVA)
anova(ANOVA2)
Anova(ANOVA2)
Anova(ANOVA)
anova(ANOVA)
anova(ANOVA2)
model.tables(ANOVA2, type = "effects")
model.tables(ANOVA2, type = "means")
etasq(ANOVA2)
model.tables(ANOVA, type = "effects")
model.tables(ANOVA, type = "means")
giveNames <- function(ARRAY1)
{
names(ARRAY1) = c("Lags", "Clusters", "Cluster proportion", "Time points",
"Distance", "Replications",  "StatusOfB")
ARRAY <- melt(ARRAY1[ , , , , , , ])
names(ARRAY) <- c("Lags", "Clusters", "Proportion", "Observations",
"Distance", "Replications",  "ARIvalue")
ARRAY$Lags <- as.factor(ARRAY$Lags)
levels(ARRAY$Lags) <- c("1", "2")
ARRAY$Clusters <- as.factor(ARRAY$Clusters)
levels(ARRAY$Clusters) <- c("2", "4")
ARRAY$Proportion <- as.factor(ARRAY$Proportion)
levels(ARRAY$Proportion) <- c("Equal", "Majority")
ARRAY$Observations <- as.factor(ARRAY$Observations)
levels(ARRAY$Observations) <- c("50", "150")
ARRAY$Distance <- as.factor(ARRAY$Distance)
levels(ARRAY$Distance) <- c("Small", "Large")
invisible(ARRAY)
}
giveNames <- function(ARRAY1, valueName)
{
names(ARRAY1) = c("Lags", "Clusters", "Cluster proportion", "Time points",
"Distance", "Replications",  "StatusOfB")
ARRAY <- melt(ARRAY1[ , , , , , , ])
names(ARRAY) <- c("Lags", "Clusters", "Proportion", "Observations",
"Distance", "Replications",  valueName)
ARRAY$Lags <- as.factor(ARRAY$Lags)
levels(ARRAY$Lags) <- c("1", "2")
ARRAY$Clusters <- as.factor(ARRAY$Clusters)
levels(ARRAY$Clusters) <- c("2", "4")
ARRAY$Proportion <- as.factor(ARRAY$Proportion)
levels(ARRAY$Proportion) <- c("Equal", "Majority")
ARRAY$Observations <- as.factor(ARRAY$Observations)
levels(ARRAY$Observations) <- c("50", "150")
ARRAY$Distance <- as.factor(ARRAY$Distance)
levels(ARRAY$Distance) <- c("Small", "Large")
invisible(ARRAY)
}
MeltedARI <- giveNames(PrelimResults$ARI, ARIvalue)
MeltedARI <- giveNames(PrelimResults$ARI, "ARIvalue")
str(MeltedARI)
MeltedVARDist <- giveNames(PrelimResults$ARI, "VARdist")
str(MeltedVARDist)
ANOVA <- aov(VARdist ~ Lags + Clusters + Proportion + Observations + Distance +
Lags * Clusters + Lags * Proportion + Lags * Observations + Lags * Distance +
Clusters * Proportion + Clusters * Observations + Clusters * Distance +
Proportion * Observations + Proportion * Distance +
Observations * Distance
, data = MeltedVARDist)
summary(ANOVA)
anova(ANOVA)
Anova(ANOVA)
model.tables(ANOVA, type = "effects")
model.tables(ANOVA, type = "means")
etasq(ANOVA)
which(etasq(ANOVA) > .1)
MeltedVARDist <- giveNames(PrelimResults$VAREuclidDistance, "VARdist")
str(MeltedVARDist)
ANOVA <- aov(VARdist ~ Lags + Clusters + Proportion + Observations + Distance +
Lags * Clusters + Lags * Proportion + Lags * Observations + Lags * Distance +
Clusters * Proportion + Clusters * Observations + Clusters * Distance +
Proportion * Observations + Proportion * Distance +
Observations * Distance
, data = MeltedVARDist)
summary(ANOVA)
anova(ANOVA)
Anova(ANOVA)
model.tables(ANOVA, type = "effects")
model.tables(ANOVA, type = "means")
etasq(ANOVA)
which(etasq(ANOVA) > .1)
MeltedVARDist[[1]]
MeltedVARDist[[2]]
str(MeltedVARDist)
meanTable <- function(ARRAY, valueName, FactorOrderVector, SplitFactorVector)
{
stargazer(rbind(tapply(valueName, list(ARRAY[[FactorOrderVector[1]]],  ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[2]]],  ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[3]]],  ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[4]]],  ARRAY[[SplitFactorVector]]), mean.sd)
),
style = "ajs"
)
}
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4, SplitFactorVector = 5)
library(stargazer)
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4, SplitFactorVector = 5)
library("weights")
mean.sd <- function(x)  return(paste(rd(mean(x), digits = 3), " " , "(",  rd(sd(x), digits = 3), ")", sep= ""))
#m
library("weights")
mean.sd <- function(x)  return(paste(rd(mean(x), digits = 3), " " , "(",  rd(sd(x), digits = 3), ")", sep= ""))
#m
meanTable <- function(ARRAY, valueName, FactorOrderVector, SplitFactorVector)
{
stargazer(rbind(tapply(valueName, list(ARRAY[[FactorOrderVector[1]]],  ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[2]]],  ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[3]]],  ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[4]]],  ARRAY[[SplitFactorVector]]), mean.sd)
),
style = "ajs"
)
}
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4, SplitFactorVector = 5)
library("weights")
mean.sd <- function(x)  return(paste(rd(mean(x), digits = 3), " " , "(",  round(sd(x), digits = 3), ")", sep= ""))
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4, SplitFactorVector = 5)
library("weights")
mean.sd <- function(x)  return(paste(round(mean(x), digits = 3), " " , "(",  round(sd(x), digits = 3), ")", sep= ""))
#mean.sd <- function(x)  return(paste(round(mean(x), digits = 3), " " , "(",  round(sd(x), digits = 3), ")", sep= ""))
# simplify2array(tapply(MeltARI$value, list(MeltARI[[counter]],  MeltARI[[2]]), mean.sd))
meanTable <- function(ARRAY, valueName, FactorOrderVector, SplitFactorVector)
{
stargazer(rbind(tapply(valueName, list(ARRAY[[FactorOrderVector[1]]],  ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[2]]],  ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[3]]],  ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[4]]],  ARRAY[[SplitFactorVector]]), mean.sd)
),
style = "ajs"
)
}
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4, SplitFactorVector = 5)
meanTable(ARRAY = MeltedVARDist, valueName = MeltedVARDist$VARdist, FactorOrderVector = 1:4, SplitFactorVector = 5)
install.packages("ggplot2")
install.packages("munsell")
install.packages("ggplot2")
library("weights")
install.packages("Hmisc")
install.packages("htmlTable")
install.packages("stringi")
install.packages("Hmisc")
library("weights")
mean.sd <- function(x)  return(paste(round(mean(x), digits = 3), " " , "(",  round(sd(x), digits = 3), ")", sep= ""))
#mean.sd <- function(x)  return(paste(round(mean(x), digits = 3), " " , "(",  round(sd(x), digits = 3), ")", sep= ""))
# simplify2array(tapply(MeltARI$value, list(MeltARI[[counter]],  MeltARI[[2]]), mean.sd))
meanTable <- function(ARRAY, valueName, FactorOrderVector, SplitFactorVector)
{
stargazer(rbind(tapply(valueName, list(ARRAY[[FactorOrderVector[1]]], ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[2]]], ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[3]]], ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[4]]], ARRAY[[SplitFactorVector]]), mean.sd)
),
style = "ajs"
)
}
# ARI
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4, SplitFactorVector = 5)
ibrary("weights")
mean.sd <- function(x)  return(paste(rd(mean(x), digits = 3), " " , "(",  rd(sd(x), digits = 3), ")", sep= ""))
#mean.sd <- function(x)  return(paste(round(mean(x), digits = 3), " " , "(",  round(sd(x), digits = 3), ")", sep= ""))
# simplify2array(tapply(MeltARI$value, list(MeltARI[[counter]],  MeltARI[[2]]), mean.sd))
meanTable <- function(ARRAY, valueName, FactorOrderVector, SplitFactorVector)
{
stargazer(rbind(tapply(valueName, list(ARRAY[[FactorOrderVector[1]]], ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[2]]], ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[3]]], ARRAY[[SplitFactorVector]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[4]]], ARRAY[[SplitFactorVector]]), mean.sd)
),
style = "ajs"
)
}
# ARI
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4, SplitFactorVector = 5)
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4, SplitFactorVector = MeltedARI$Distance)
meanTable <- function(ARRAY, valueName, FactorOrderVector, SplitFactorVector)
{
stargazer(rbind(tapply(valueName, list(ARRAY[[FactorOrderVector[1]]], SplitFactorVector), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[2]]], SplitFactorVector), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[3]]], SplitFactorVector), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[4]]], SplitFactorVector), mean.sd)
),
style = "ajs"
)
}
# ARI
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4, SplitFactorVector = MeltedARI$Distance)
# ARI
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4,
SplitFactorVector = c(MeltedARI$Distance, MeltedARI$Observations ) )
meanTable <- function(ARRAY, valueName, FactorOrderVector, SplitFactorVector)
{
stargazer(rbind(tapply(valueName, list(ARRAY[[FactorOrderVector[1]]], SplitFactorVector), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[2]]], SplitFactorVector), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[3]]], SplitFactorVector), mean.sd)
),
style = "ajs"
)
}
# ARI
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4,
SplitFactorVector = c(MeltedARI$Distance, MeltedARI$Observations ) )
SplitFactorVector = c(MeltedARI$Distance, MeltedARI$Observations)
tapply(valueName, list(ARRAY[[FactorOrderVector[1]]], SplitFactorVector), mean.sd)
ARRAY = MeltedARI
valueName = MeltedARI$ARIvalue
FactorOrderVector = 1:4
tapply(valueName, list(ARRAY[[FactorOrderVector[1]]], SplitFactorVector), mean.sd)
?list
tapply(valueName, list(ARRAY[[FactorOrderVector[1]]], SplitFactorVector, ARRAY[[FactorOrderVector[4]]]), mean.sd)
SplitFactorVector
ARRAY[[FactorOrderVector[4]]]
str(ARRAY)
is.na(ARRAY)
which(is.na(ARRAY))
str(ARRAY)
FactorOrderVector[1]
ARRAY[[FactorOrderVector[1]]]
SplitFactorVector
MeltedARI$Distance
SplitFactorVector = MeltedARI$Distance
SplitFactorVector
tapply(valueName, list(ARRAY[[FactorOrderVector[1]]], SplitFactorVector, ARRAY[[FactorOrderVector[4]]]), mean.sd)
meanTable <- function(ARRAY, valueName, FactorOrderVector, SplitFactorVector)
{
stargazer(rbind(tapply(valueName, list(ARRAY[[FactorOrderVector[1]]], SplitFactorVector, ARRAY[[FactorOrderVector[4]]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[2]]], SplitFactorVector, ARRAY[[FactorOrderVector[4]]]), mean.sd),
tapply(valueName, list(ARRAY[[FactorOrderVector[3]]], SplitFactorVector, ARRAY[[FactorOrderVector[4]]]), mean.sd)
),
style = "ajs"
)
}
# ARI
meanTable(ARRAY = MeltedARI, valueName = MeltedARI$ARIvalue, FactorOrderVector = 1:4,
SplitFactorVector = MeltedARI$Distance)
